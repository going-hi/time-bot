name: Container Health Check

on:
  workflow_dispatch:

env:
  TELEGRAM_TO: -1003170352623
  CONTAINER_NAME: "bot-ebal-nahui"

jobs:
  check-container:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Проверяем контейнер на удалённом сервере
      - name: Check container status on remote server
        id: check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: false
          script: |
            CONTAINER="${{ env.CONTAINER_NAME }}"
            REPORT="/tmp/container_status.txt"
            RESULT_FILE="/tmp/result.txt"

            echo "🔍 Checking container: $CONTAINER" > "$REPORT"

            if ! docker inspect "$CONTAINER" >/dev/null 2>&1; then
              echo "❌ Container not found" >> "$REPORT"
              RESULT="not_found|❌ Container $CONTAINER does not exist"
            else
              STATUS=$(docker inspect --format='{{.State.Status}}' "$CONTAINER")
              echo "Status: $STATUS" >> "$REPORT"
              echo "Details:" >> "$REPORT"
              docker inspect "$CONTAINER" | head -n 30 >> "$REPORT"
              
              if [ "$STATUS" = "running" ]; then
                docker logs --tail 20 "$CONTAINER" >> "$REPORT" 2>&1
                RESULT="running|🟢 Container is running"
              else
                RESULT="stopped|🔴 Container is stopped"
              fi
            fi

            echo "$RESULT" > "$RESULT_FILE"

      # 2️⃣ Считываем результат напрямую по SSH
      - name: Get result from server manually
        id: get_result
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script_stop: false
          script: |
            echo "output_start"
            cat /tmp/result.txt
            echo "output_end"

      # 3️⃣ Сохраняем результат локально
      - name: Save result to file
        run: |
          echo "${{ steps.get_result.outputs.output }}" | \
            sed -n '/output_start/,/output_end/{//!p;}' > result.txt

      # 4️⃣ Загружаем отчёт как артефакт
      - name: Upload report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: container-status
          path: result.txt

      # 5️⃣ Разбираем результат
      - name: Parse container status
        id: parse
        run: |
          line=$(cat result.txt || echo "unknown|no result")
          status=$(echo "$line" | cut -d'|' -f1)
          details=$(echo "$line" | cut -d'|' -f2-)
          echo "status=$status" >> $GITHUB_OUTPUT
          echo "details=$details" >> $GITHUB_OUTPUT

      # 6️⃣ Получаем текущее время (Москва)
      - name: Get current time (Moscow)
        id: time
        run: |
          export TZ="Europe/Moscow"
          now=$(date +"%d %B %Y, %H:%M (%Z)")
          echo "time=$now" >> $GITHUB_OUTPUT

      # 7️⃣ Telegram уведомления
      - name: Notify if container is running
        if: ${{ steps.parse.outputs.status == 'running' }}
        uses: appleboy/telegram-action@master
        with:
          to: ${{ env.TELEGRAM_TO }}
          token: ${{ secrets.BOT_TOKEN }}
          format: markdown
          message: |
            ✅ *Контейнер работает!*
            🐳 *Имя:* `${{ env.CONTAINER_NAME }}`
            🟢 ${{ steps.parse.outputs.details }}
            🕒 *Время:* ${{ steps.time.outputs.time }}
            📄 [Отчёт в артефактах GitHub Actions](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

      - name: Notify if container is stopped or not found
        if: ${{ steps.parse.outputs.status != 'running' }}
        uses: appleboy/telegram-action@master
        with:
          to: ${{ env.TELEGRAM_TO }}
          token: ${{ secrets.BOT_TOKEN }}
          format: markdown
          message: |
            ⚠️ *Контейнер не работает!*
            🐳 *Имя:* `${{ env.CONTAINER_NAME }}`
            🔴 ${{ steps.parse.outputs.details }}
            🕒 *Время:* ${{ steps.time.outputs.time }}
            📄 [Отчёт в артефактах GitHub Actions](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
