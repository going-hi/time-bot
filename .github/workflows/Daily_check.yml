name: Container Health Check

on:
  workflow_dispatch:
  # schedule:
  #   - cron: '*/5 * * * *'

env:
  TELEGRAM_TO: -1003170352623
  CONTAINER_NAME: "bot-ebal-nahui"

jobs:
  check-container:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
      - name: Check container status on remote server
        id: check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: false
          register: true
          script: |
            CONTAINER="${{ env.CONTAINER_NAME }}"
            echo "üîç Checking container: $CONTAINER"

            if ! docker inspect "$CONTAINER" >/dev/null 2>&1; then
              RESULT="not_found|‚ùå Container $CONTAINER does not exist"
            else
              STATUS=$(docker inspect --format='{{.State.Status}}' "$CONTAINER")
              if [ "$STATUS" = "running" ]; then
                RESULT="running|üü¢ Container is running"
              else
                RESULT="stopped|üî¥ Container is stopped"
              fi
            fi

            echo "$RESULT"

      # 2Ô∏è‚É£ –†–∞–∑–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      - name: Parse container status
        id: parse
        run: |
          line="${{ steps.check.outputs.result }}"
          echo "Raw line: $line"
          last_line=$(echo "$line" | grep '|' | tail -n 1)
          echo "Parsed line: $last_line"
          status=$(echo "$line" | cut -d'|' -f1)
          details=$(echo "$line" | cut -d'|' -f2-)
          echo "status=$status" >> $GITHUB_OUTPUT
          echo "details=$details" >> $GITHUB_OUTPUT

      # 3Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–ú–°–ö)
      - name: Get current time (Moscow)
        id: time
        run: |
          export TZ="Europe/Moscow"
          now=$(date +"%d %B %Y, %H:%M (%Z)")
          echo "time=$now" >> $GITHUB_OUTPUT

      # 4Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤ Telegram (–µ—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç)
      - name: Notify if container is running
        if: ${{ steps.parse.outputs.status == 'running' }}
        uses: appleboy/telegram-action@master
        with:
          to: ${{ env.TELEGRAM_TO }}
          token: ${{ secrets.BOT_TOKEN }}
          format: markdown
          message: |
            ‚úÖ *–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!*
            üê≥ *–ò–º—è:* `${{ env.CONTAINER_NAME }}`
            üü¢ ${{ steps.parse.outputs.details }}
            üïí *–í—Ä–µ–º—è:* ${{ steps.time.outputs.time }}

      # 5Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤ Telegram (–µ—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
      - name: Notify if container is stopped or not found
        if: ${{ steps.parse.outputs.status != 'running' }}
        uses: appleboy/telegram-action@master
        with:
          to: ${{ env.TELEGRAM_TO }}
          token: ${{ secrets.BOT_TOKEN }}
          format: markdown
          message: |
            ‚ö†Ô∏è *–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!*
            üê≥ *–ò–º—è:* `${{ env.CONTAINER_NAME }}`
            üî¥ ${{ steps.parse.outputs.details }}
            üïí *–í—Ä–µ–º—è:* ${{ steps.time.outputs.time }}
            üîó [–û—Ç–∫—Ä—ã—Ç—å –ª–æ–≥–∏ –≤ GitHub Actions](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})